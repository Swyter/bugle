BuGLe: questions that nobody has asked yet, but which they might...
===================================================================
Note that compilation problems are addressed in TROUBLESHOOTING.

Q. My program crashes, somewhere deep inside the OpenGL driver and I
can't get a stack trace. How can I tell what caused it?
A. Use the "unwindstack" filterset, and see the manual page for
documentation.
A. Use the "log" filterset, and turn on the flush option (see the example
in doc/examples/filters). Then after your program crashes, the last entry
in the log file will most likely be the one just before the crash.

Q. I don't want to have to set BUGLE_CHAIN all the time; can't I
specify a default?
A. The first chain in the configuration file is the default.

Q. I don't want to have to set LD_PRELOAD all the time, or it is not
available on my system. Can I just link directly to BuGLe?
A. Yes, you can specify -lbugle in place of -lGL when you link. If it
is not installed in a standard directory, you may need extra compiler
flags, such as -L/path/to/bugle -Wl,-rpath -Wl,/path/to/bugle

Q. How do I build a 32-bit version of BuGLe on an AMD64 system?
A. The exact details will depend on your OS. Here is what I do on Gentoo:

./configure --x-libraries=/emul/linux/x86/usr/lib32 CC="gcc -m32" CXX="g++ -m32" \
   --libdir=/usr/local/lib32 --bindir=/usr/local/bin32

Gentoo also tries to be clever by putting in a libGL.la to make linking
against OpenGL work better, but in some cases it causes libtool to pick
up the 64-bit version of OpenGL. I work around this by copying
/usr/lib/libGL.la into the compilation directory, and replacing all
references to /usr/lib with /usr/lib32 and /usr/X11R6/lib with
/usr/X11R6/lib32.

Q. How do you get SDL-based apps to use BuGLe?
A. Run them as

LD_PRELOAD=/path/to/libbugle.so SDL_VIDEO_GL_DRIVER=/path/to/libbugle.so tuxracer

Q. How do you get Quake3 or Doom3 to use BuGLe?
A. Run it as

LD_PRELOAD=/path/to/libbugle.so quake3 +set r_glDriver /path/to/libbugle.so

(the LD_PRELOAD is new - without it the keyboard interception will not work)
Note that Quake3 and Doom3 are 32-bit binaries, so if you have an AMD64
system you will need to compile a 32-bit bugle, specify the correct
paths to it and probably set LD_LIBRARY_PATH to cover 32-bit libraries
(give paths to find libGL.so, libX11.so and libbugle.so to be safe).

Q. What is the performance penalty?
A. That depends on what you're doing with the library. If you only use
filter-sets that intercept a few functions (like showstats), then all
other functions suffer only a very small penalty. Using filter-sets that
check for error after every function (including showerror and the
debugger) adds a much bigger penalty.

To give you an example, here are some rough numbers for Quake3 1.32 on
demo 'four' (not even remotely scientificly collected, and definitely
out of date - Quake3 no longer works on my machine with or without
bugle).

without BuGLe: 167fps
with no filter-sets: 167fps
with the showstats filter-set: 166.2fps
with no filter-sets, but in the debugger: 137.4fps
with tracing: 47.8fps

Tracing is particularly slow because it does file I/O, as well as a lot
of text formatting.

Q. Why is there a mix of C and C++ code?
A. The library itself is written entirely in C. This is mainly because
a C++ library will drag libstdc++ in with it, and this has been found to
create some problems when forcing linking to an application that already
depends on a conflicting version of libstdc++. There is still a
dependence on libc, but libc is less of a moving target. The code
generator is written in C++, since it makes the coding easier and does
not introduce the dependency issues above.

Q. Why is a recent (>3.0) version of gcc required?
A. BuGLe is driven by a number of tables that list all the information
about the various types and functions in OpenGL. To capture this
information, it is necessary to parse the OpenGL header files. It would
be very difficult to write a parser to do this robustly, but gcc
already knows how to do this. Unfortunately, the ability to extract a
parse tree from gcc (the -fdump-translation-unit option)
was only added sometime after 3.0, and is also broken in 4.0 (fixed in
4.1).
