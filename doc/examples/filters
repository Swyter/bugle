# Simply pass commands through to OpenGL
chain pass
{
}

# Checks for errors (written to stderr), and logs all calls to file.
# The errors are also logged to file. Changing "showerror" to "error"
# will suppress printing to strerr. Uncomment the "flush" line to have
# the log flushed after every call. This is slow but will guarantee as
# complete as possible a log in the event of a crash.
chain trace
{
    filterset trace
    filterset showerror
    filterset log
    {
    	filename "/tmp/bugle.log"
        # flush "yes"
    }
}

# Shows a fps counter on screen
chain showfps
{
    filterset stats_basic

    # Replace showstats with logstats to write to the log instead
    filterset showstats
    {
        show "frames per second"

        # Uncomment this and press 'A' to accumulate FPS. The FPS shown
        # will be the average from when the key was pressed.
        # key_accumulate "A"
        # Uncomment this and press 'I' to return to the default display
        # key_noaccumulate "I"
    }
}

# Show assorted stats. This is just an example; see the statistics
# example file to see what statistics are available.
chain showstats
{
    filterset stats_basic
    filterset stats_primitives
    # Note: stats_fragments requires GL_ARB_occlusion_query
    filterset stats_fragments
    filterset showstats
    {
        show "frames per second"
        show "batches per frame"
        graph "triangles per second"
        graph "fragments per second"
    }
}

# On exit, shows the extensions used by the program.
chain showextensions
{
    filterset showextensions
}

# Captures a screenshot when a key is pressed
chain screenshot
{
    filterset screenshot
    {
        filename "/tmp/bugle%d.ppm" # A %d will be filled in with the frame number

        # Sets the key (default: Ctrl-Alt-Shift-S). Key names are based on
        # X11; see /usr/include/X11/keysymdefs.h for a list.
        key_screenshot "C-A-S-S"
    }
}

# Captures every frame into a video file.
chain video
{
    # Press C-V to start and to stop recording. By removing the "inactive"
    # tag, recording will start immediately.
    filterset screenshot C-V inactive
    {
        video "yes"
        filename "/tmp/bugle.avi"

        # You can in theory use any codec supported by ffmpeg
        codec "mpeg4"

        # Roughly DVD size, although no high quality options are set
        bitrate "7500000"

        # By default, a frame is captured every 30th of a second, with
        # frames skipped or duplicated as necessary. Uncomment this
        # line to instead capture every frame exactly once to the
        # output.
        # allframes "yes"

        # Control the encoding latency. A higher latency may give
        # better throughput, at the expense of more memory.
        # lag "1"
    }
}

chain eps
{
    filterset eps
    {
        filename "/tmp/bugle.eps"  # Can use %d to obtain frame number
        key_eps "C-A-S-W"          # Key to press to take snapshot
    }
}

# A cute hack to get a wireframe mode
chain wireframe
{
    filterset wireframe
}

# Use this filter-set and press the key sequence below to give manual
# control over the camera position. Pressing it again restores the
# original camera position and deactivates the override keys.
# Useful for LOD and visibility culling research.
chain camera
{
    filterset camera "C-A-S-C" inactive
    {
        # mouse_dga yes          # Try enabling this if moving the mouse
                                 # causes the view to jump all over
                                 # the place
        # The defaults are:
        # key_forward "Up"
        # key_back "Down"
        # key_left "Left"
        # key_right "Right"
        # key_faster "Page_Up"   # speeds up motion
        # key_slower "Page_Down" # slows down motion
        # key_reset "R"          # resets the camera to the app's view (no default)
        # key_toggle "T"         # toggles mouse capture (no default)
        # speed "1.0"            # initial keyboard motion speed
    }
}

# Forces rendering to the frontbuffer rather than the backbuffer. This
# is useful to see how a scene is built up in the debugger
chain frontbuffer
{
    filterset frontbuffer
}

# Use this if your program is crashing somewhere inside the driver, and you
# can't get a useful stack trace (this used to happen with NVIDIA's drivers,
# although it seems that the 60 series fixes it). Run your program
# inside gdb, and when your receive SIGSEGV, select to continue. You
# will see a message from the library, and another SIGSEGV will occur.
# At this point gdb should give you a meaningful back-trace. This
# depends on non-portable behaviour, so Your Mileage Might Vary.
chain crash
{
    filterset unwindstack
}

# If you get weird behaviour or crashes, try using this chain. It checks
# for several cases of illegal usage of OpenGL.
chain validate
{
    filterset checks
    filterset showerror
    filterset log
}
